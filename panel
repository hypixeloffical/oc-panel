local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/biggaboy212/Public-Resources/main/MacLib/maclib.lua"))()
local Whitelist = loadstring(game:HttpGet("https://raw.githubusercontent.com/hypixeloffical/oc-panel/refs/heads/main/whitelist"))()

if loadstring("return 5")() ~= 5 then
    print("ðŸ¤¡")
    while true do end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = Players.LocalPlayer

local Premium = table.find(Whitelist, Player.Name) and table.find(Whitelist, Player.UserId)

local Mouse = Player:GetMouse()

local Window = MacLib:Window({
    Title = "OC Glitchers Panel",
    Subtitle = "Panel for making glitched parts",
    Size = getgenv().Size or UDim2.new(0.66, 0, 0.66, 0),
    DragStyle = 2,
    DisabledWindowControls = {},
    ShowUserInfo = false,
    Keybind = Enum.KeyCode.RightControl,
    AcrylicBlur = false
})

local PremiumGroup = Window:TabGroup()

if not Premium then
    local PremiumTab = PremiumGroup:Tab({
        Name = "Premium",
        Image = ""
    })
    local PremiumSection1 = PremiumTab:Section({
        Side = "Left"
    })

    PremiumSection1:Label({
        Text = "Want More Features? Buy Premium!\n\n- No number limits\n- Effect and Gear Behavior Support\n- Access to NaN, inf and -inf\n- Auto mario naming\n- Be Cool"
    })

    PremiumSection1:Button({
        Name = "Buy Premium",
        Callback = function()
            if setclipboard then
                setclipboard("https://www.roblox.com/game-pass/936802148/Premium-Panel")
            end
            Window:Notify({
                Title = "OC Glitchers Panel",
                Description = "Copied the gamepass link to your clipboard"
            })
        end
    })
end

local HowToUseTab = PremiumGroup:Tab({
    Name = "FAQ",
    Image = ""
})
HowToUseTab:Section({Side = "Left"}):Label({Text = "-- How do I select parts --\n1. Open the Selection Tab\n2. Toggle the selection on\n3. Click on the parts that you want to select. \nNote that the parts need to be in obbies that you have edit in\n4. Toggle Selection off\nYou can also deselect parts by clicking on them"})
HowToUseTab:Section({Side = "Left"}):Label({Text = "-- How do I make glitched parts --\nAfter selecting your parts:\n1. Go to the property category\n2. Enter the property name\nNote that the properties in the behavior section has a different naming system than the others.\nPremium users get access to auto namer which converts normal properties into the naming system.\n3. Go to the values tab\n4. Enter the value you want to set to in the correct textbox.\nFor text values enter your text into the string value box\nFor number, position and advanced color values enter them to the non-string value box\n5. Press apply."})

local Selection = Window:TabGroup()

local Selector = Selection:Tab({
    Name = "Selection",
    Image = ""
})

local SelectorSection1 = Selector:Section({
    Side = "Left"
})

local SelectionEnabled = false

local Selected = {}

SelectorSection1:Toggle({
    Name = "Toggle Selection",
    Default = false,
    Callback = function(value)
        SelectionEnabled = value
        Window:Notify({
            Title = "OC Glitchers Panel",
            Description = "Selection " .. (value and "Enabled" or "Disabled")
        })
    end
}, nil)

Mouse.Button1Down:Connect(function()
    if not SelectionEnabled then return end
    local Target = Mouse.Target

    if table.find(Selected, Target) then
        table.remove(Selected, table.find(Selected, Target))
        Target:FindFirstChild("Selected"):Destroy()
    else
        table.insert(Selected, Target)
        local Highlight = Instance.new("Highlight")
        Highlight.Name = "Selected"
        Highlight.Parent = Target
        Highlight.Adornee = Target
        Highlight.FillTransparency = 0.7
        Highlight.FillColor = Color3.fromRGB(143, 205, 233)
        Highlight.OutlineTransparency = 0
        Highlight.OutlineColor = Color3.fromRGB(143, 205, 233)
    end
end)

local Editing = Window:TabGroup()

local Effect = "light"
local Property = "Reflectance"
local Type = "PaintObject"
local Extra = false

local Value = 5
local ExtraBehaviorType = "DefaultNumberValue"

local Appearance = Editing:Tab({
    Name = "Appearance",
    Image = ""
})

local AppearanceSection1 = Appearance:Section({
    Side = "Left"
})

AppearanceSection1:Input({
    Name = "Property Name",
    Placeholder = "Reflectance",
    AcceptedCharacters = "All",
    Callback = function(value)
        Property = value
        Type = "PaintObject"
        Extra = false
    end
}, nil)

local Behavior = Editing:Tab({
    Name = "Behavior",
    Image = ""
})

local BehaviorSection1 = Behavior:Section({
    Side = "Left"
})

BehaviorSection1:Input({
    Name = "Property Name",
    Placeholder = "Damage",
    AcceptedCharacters = "All",
    Callback = function(value)
        if Premium then
            Property = ({value:gsub("Heal", "H"):gsub("Damage", "D"):gsub("Spin Axis", "A"):gsub("Jump", "J"):gsub("Gear Type", "Gn"):gsub("Falling Speed", "fs"):gsub("Falling Direction", "fd"):gsub("Respawn Time", "fR"):gsub("Falling Time", "fT"):gsub("Falling Delay", "fD"):gsub("Time Until Reappear", "T"):gsub("Teleport Location", "P"):gsub("Click Radius", "Cd"):gsub("Time Visible", "tN"):gsub("Time Invisible" , "tT"):gsub("Time Offset", "tO"):gsub("Speed", "S"):gsub("Walk Speed", "Z"):gsub("Walkspeed", "Z"):gsub("Spin Distance", "sD"):gsub("Moving Activation Type", "MaT"):gsub("Music Speed", "MS"):gsub("Priority", "Pr"):gsub("Cart Speed", "cS"):gsub("Auto Delete Time", "cR"):gsub("Cart Type", "ct"):gsub("Easing Style", "E"):gsub("Button Activation Type", "BaT"):gsub("Arrow Transparency", "cT"):gsub("Button Time", "bt"):gsub("Debounce", "Pd"):gsub("Spin Time", "sT"):gsub("Spin Offset", "sO"):gsub("Music Start Time", "MS"):gsub("Music Volume", "MV")})[1]
        else
            Property = value
        end
        Type = "BehaviourObject"
        Extra = false
    end
}, nil)

if Premium then
    local GearBehavior = Editing:Tab({
        Name = "Gear Behavior",
        Image = ""
    })

    local GearBehaviorSection1 = GearBehavior:Section({
        Side = "Left"
    })

    GearBehaviorSection1:Input({
        Name = "Property Name",
        Placeholder = "Damage",
        AcceptedCharacters = "All",
        Callback = function(value)
            Property = value
            Type = "BehaviourObject"
            Extra = true
        end
    }, nil)

    local Effects = Editing:Tab({
        Name = "Effects",
        Image = ""
    })

    local EffectsSection1 = Effects:Section({
        Side = "Left"
    })

    EffectsSection1:Input({
        Name = "Effect Name",
        Placeholder = "Light",
        AcceptedCharacters = "All",
        Callback = function(value)
            Effect = value:lower()
            Type = "EffectObject"
            Extra = false
        end
    }, nil)

    EffectsSection1:Input({
        Name = "Property Name",
        Placeholder = "Range",
        AcceptedCharacters = "All",
        Callback = function(value)
            Property = value
            Type = "EffectObject"
            Extra = false
        end
    }, nil)
end

local Values = Window:TabGroup()

local ValuesTab = Values:Tab({
    Name = "Values",
    Image = ""
})

local ValuesSection1 = ValuesTab:Section({
    Side = "Left"
})

ValuesSection1:Input({
    Name = "String Value",
    Placeholder = "Hello World!",
    AcceptedCharacters = "All",
    Callback = function(value)
        Value = tostring(value)
        ExtraBehaviorType = "DefaultStringValue"
    end
})

ValuesSection1:Input({
    Name = "Non-String Value",
    Placeholder = "Vector3.new(1,1,1), 5 etc.",
    AcceptedCharacters = "All",
    Callback = function(value)
        local success, NewValue = pcall(function() 
            return loadstring("return " .. tostring(value))() 
        end)
        
        if not success then
            Window:Notify({
                Title = "OC Glitchers Panel",
                Description = "Invalid input: " .. tostring(value)
            })
            return
        end

        if Premium then
            Value = NewValue
        else
            if typeof(NewValue) == "number" then
                if tostring(NewValue) == "nan" then
                    Value = 0
                    Window:Notify({
                        Title = "OC Glitchers Panel",
                        Description = "Your input NaN was clamped to 0"
                    })
                else
                    local clampedValue = math.clamp(NewValue, -4096, 4096)
                    if clampedValue ~= NewValue then
                        Window:Notify({
                            Title = "OC Glitchers Panel",
                            Description = "Your input " .. tostring(NewValue) .. " was clamped to " .. tostring(clampedValue)
                        })
                        Value = clampedValue
                    else
                        Value = NewValue
                    end
                end
            else
                Value = NewValue
            end
        end

        if Value then
            ExtraBehaviorType = "Default" .. typeof(Value):sub(1, 1):upper() .. typeof(Value):sub(2):lower() .. "Value"
        end
    end
})

ValuesSection1:Colorpicker({
    Name = "Color Value",
    Default = Color3.new(1, 1, 1),
    Alpha = nil,
    Callback = function(color, _)
        Value = color
        ExtraBehaviorType = "DefaultColor3Value"
    end
})

ValuesSection1:Button({
    Name = "Apply",
    Callback = function()
        local Events = ReplicatedStorage.Events

        if Type == "PaintObject" then
            Events.PaintObject:InvokeServer(Selected, Property, Value)
        elseif Type == "BehaviourObject" then
            if Extra then
                Events.BehaviourObject:InvokeServer(Selected, ExtraBehaviorType, Value, Property)
            else
                Events.BehaviourObject:InvokeServer(Selected, Property, Value)
            end
        elseif Type == "EffectObject" then
            Events.EffectObject:InvokeServer(Selected, Effect, Property, Value)
        end
    end
})
